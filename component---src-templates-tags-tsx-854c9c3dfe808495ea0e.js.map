{"version":3,"file":"component---src-templates-tags-tsx-854c9c3dfe808495ea0e.js","mappings":"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","sources":["webpack://gatsby-tailwindcss-typescript/./src/components/Banner.tsx","webpack://gatsby-tailwindcss-typescript/./src/components/PostItem.tsx","webpack://gatsby-tailwindcss-typescript/./src/components/SideBar.tsx","webpack://gatsby-tailwindcss-typescript/./src/components/Tags.tsx","webpack://gatsby-tailwindcss-typescript/./src/hooks/useIntersectionObserver.ts","webpack://gatsby-tailwindcss-typescript/./src/templates/tags.tsx","webpack://gatsby-tailwindcss-typescript/./src/utils/urlHandler.ts"],"sourcesContent":["import React from \"react\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nconst Banner: React.FC = () => {\n  return (\n    <div className=\"grid grid-cols-2 gap-4 py-4 pb-20\">\n      <div className=\"flex content-center justify-center justify-self-end flex-col md:pr-12\">\n        <p className=\"text-xl pb-2\">Keep curiosity alive.</p>\n      </div>\n      <div className=\"flex items-center\tjustify-start\">\n        <StaticImage\n          src=\"../images/banner.png\"\n          alt=\"ian and hippo\"\n          width={240}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n","import { Link } from \"gatsby\";\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport { fetchPostName } from \"../utils/urlHandler\";\n\ntype PostItemType = {\n  slug: string;\n  title: string;\n  description: string;\n  postImage?: IGatsbyImageData;\n  date: string;\n  category: string;\n  readingTimeText: string;\n};\n\nconst PostItem = ({\n  slug,\n  title,\n  description,\n  postImage,\n  date,\n  category,\n  readingTimeText,\n}: PostItemType) => {\n  return (\n    <article\n      key={slug}\n      className=\"grid grid-cols-3 gap-4 pb-20\"\n      itemScope\n      itemType=\"http://schema.org/Article\"\n    >\n      <div className=\"col-span-2 flex flex-col\">\n        <header className=\"pb-2\">\n          <h2>\n            <Link to={`/${fetchPostName(slug)}`} itemProp=\"url\">\n              <h2\n                className=\"text-lg font-bold text-ellipsis overflow-hidden\"\n                itemProp=\"headline\"\n              >\n                {title}\n              </h2>\n            </Link>\n          </h2>\n        </header>\n        <section className=\"pb-2 grow\">\n          <Link to={`/${fetchPostName(slug)}`} itemProp=\"url\">\n            <p\n              className=\"line-clamp-3\"\n              dangerouslySetInnerHTML={{\n                __html: description,\n              }}\n              itemProp=\"description\"\n            />\n          </Link>\n        </section>\n        <div className=\"flex gap-1 items-center text-sm flex-wrap\">\n          <div>{date}</div>\n          <div>·</div>\n          <Link to={`/categories/${category}`}>{category}</Link>\n          <div>·</div>\n          <div>{readingTimeText}</div>\n        </div>\n      </div>\n      <div className=\"flex items-center\">\n        {postImage && <GatsbyImage image={postImage} alt={title} />}\n      </div>\n    </article>\n  );\n};\n\nexport default PostItem;\n","import React, { useRef } from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nimport useIntersectionObserver from \"../hooks/useIntersectionObserver\";\n\nimport type { CategoriesType, TagsType } from \"../pages/index\";\nimport Tags from \"./Tags\";\n\nconst SideBar = () => {\n  const {\n    allMarkdownRemark: { tags, categories },\n  }: {\n    allMarkdownRemark: { tags: TagsType[]; categories: CategoriesType[] };\n  } = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n          tags: group(field: { frontmatter: { tags: SELECT } }) {\n            value: fieldValue\n          }\n          categories: group(field: { frontmatter: { categories: SELECT } }) {\n            value: fieldValue\n          }\n        }\n      }\n    `\n  );\n\n  const ref = useRef<HTMLDivElement | null>(null);\n  const entry = useIntersectionObserver(ref, { rootMargin: \"0px 0px -100%\" });\n  const isVisible = entry?.isIntersecting;\n\n  const fixClassName = isVisible ? \"sticky top-0\" : \"\";\n\n  return (\n    <div ref={ref} className=\"h-full\">\n      <div className={`pt-2 ${fixClassName}`}>\n        <div className=\"pb-6\">\n          <p className=\"text-base py-2 font-medium\">Sponsor Creator</p>\n          <a\n            href=\"https://store.line.me/stickershop/author/1019955/zh-Hant\"\n            className=\"link text-base leading-6 font-medium py-1 text-center\"\n            target=\"_blank\"\n          >\n            <StaticImage\n              src=\"../images/hippostick.png\"\n              alt=\"line sticker hippo\"\n              width={150}\n            />\n            <p className=\"text-base text-center py-2\">Line Sticker</p>\n          </a>\n        </div>\n        <div className=\"pb-6\">\n          <p className=\"text-base py-2 font-medium\">Category</p>\n          <div>\n            {categories.map(({ value }) => (\n              <Link key={value} to={`/categories/${value}`}>\n                <p className=\"text-sm pb-2\">{value}</p>\n              </Link>\n            ))}\n          </div>\n        </div>\n        <div className=\"pb-6\">\n          <p className=\"text-base py-2 font-medium\">Tag</p>\n          <div className=\"flex flex-wrap\">\n            <Tags tags={tags} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport type { TagsType } from \"../pages\";\n\nconst Tags: React.FC<{ tags: TagsType[] }> = ({ tags }) => {\n  return (\n    <>\n      {tags.map(({ value }, index) => (\n        <div className=\"tag-item\" key={value}>\n          <Link to={`/tags/${value && value.replace(/\\./g, \"_\")}`}>\n            <span className=\"text-sm pb-2\">\n              {value && value.replace(/_/g, \" \")}\n            </span>\n          </Link>\n          {index < tags.length - 1 && <span className=\"px-0.5\">·</span>}\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Tags;\n","import { useEffect, useState } from \"react\";\nimport type { RefObject } from \"react\";\n\nfunction useIntersectionObserver(\n  elementRef: RefObject<Element>,\n  { threshold = 0, root = null, rootMargin = \"0%\" }: IntersectionObserverInit\n): IntersectionObserverEntry | undefined {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\n    setEntry(entry);\n  };\n\n  useEffect(() => {\n    const node = elementRef?.current;\n    if (window.IntersectionObserver && node) {\n      const observer = new IntersectionObserver(updateEntry, {\n        threshold,\n        root,\n        rootMargin,\n      });\n\n      observer.observe(node);\n\n      return () => observer.disconnect();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef, root, rootMargin]);\n\n  return entry;\n}\n\nexport default useIntersectionObserver;\n","import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\nimport { getImage, IGatsbyImageData } from \"gatsby-plugin-image\";\n\nimport Layout from \"../components/Layout\";\nimport Banner from \"../components/Banner\";\nimport Seo from \"../components/Seo\";\nimport PostItem from \"../components/PostItem\";\nimport SideBar from \"../components/SideBar\";\n\nexport type CategoriesType = {\n  value: string;\n};\n\nexport type TagsType = {\n  value: string;\n};\n\ntype DataWithPosts = {\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n  allMarkdownRemark: {\n    nodes: [\n      {\n        excerpt: string;\n        fields: {\n          slug: string;\n          readingTime: {\n            text: string;\n          };\n        };\n        frontmatter: {\n          date: string;\n          title: string;\n          description: string;\n          thumbnail: IGatsbyImageData;\n          categories: string;\n        };\n      }\n    ];\n  };\n};\n\nconst Tags = ({ pageContext, data, location }: PageProps<DataWithPosts>) => {\n  const posts = data.allMarkdownRemark.nodes;\n  const { tag } = pageContext as { tag: string };\n\n  return (\n    <Layout location={location}>\n      <Seo title=\"Ian Chu\" />\n      <Banner />\n      <main>\n        <div className=\"container mx-auto py-4 sm:px-4 lg:max-w-screen-lg\">\n          <div className=\"pb-10\">\n            <h3 className=\"text-lg font-bold\">\n              Tag: {tag} ({posts.length})\n            </h3>\n          </div>\n          <div className=\"grid md:grid-cols-6 md:gap-20\">\n            <div className=\"md:col-span-4\">\n              {posts.map((post) => {\n                const title = post.frontmatter.title || post.fields.slug;\n                const postImage = getImage(post.frontmatter.thumbnail);\n                return (\n                  <PostItem\n                    key={post.fields.slug}\n                    slug={post.fields.slug}\n                    title={title}\n                    description={post.frontmatter.description || post.excerpt}\n                    postImage={postImage}\n                    date={post.frontmatter.date}\n                    category={post.frontmatter.categories}\n                    readingTimeText={post.fields.readingTime.text}\n                  />\n                );\n              })}\n            </div>\n            <div className=\"hidden md:block md:col-span-2\">\n              <SideBar />\n            </div>\n          </div>\n        </div>\n      </main>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: {frontmatter: {date: DESC}}\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n          readingTime {\n            text\n          }\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(width: 400)\n            }\n          }\n          categories\n        }\n      }\n    }\n  }\n`;\n","export const fetchPostName = (slug: string) => {\n  return slug.split(\"-\")[2];\n};\n"],"names":["Banner","React","className","StaticImage","src","alt","width","__imageData","require","_ref","slug","title","description","postImage","date","category","readingTimeText","key","itemScope","itemType","Link","to","fetchPostName","itemProp","dangerouslySetInnerHTML","__html","GatsbyImage","image","SideBar","allMarkdownRemark","tags","categories","useStaticQuery","ref","useRef","entry","useIntersectionObserver","rootMargin","fixClassName","isIntersecting","href","target","map","value","Tags","_ref2","index","replace","length","elementRef","threshold","root","setEntry","useState","updateEntry","useEffect","node","current","window","IntersectionObserver","observer","observe","disconnect","pageContext","data","location","posts","nodes","tag","Layout","Seo","post","frontmatter","fields","getImage","thumbnail","PostItem","excerpt","readingTime","text","split"],"sourceRoot":""}