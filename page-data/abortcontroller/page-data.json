{"componentChunkName":"component---src-templates-post-tsx","path":"/abortcontroller/","result":{"data":{"site":{"siteMetadata":{"title":"Ian Chu"}},"markdownRemark":{"id":"f12e6f17-9198-5610-9003-1a2eb2531122","excerpt":"先說這篇文章可能有點短，但我覺得滿實用的，所以還是來寫下紀錄，如果你有遇到一樣問題就…很棒，會簡單介紹一下我使用的背景，再來介紹什麼是 AbortController 最後是怎麼用在 React 專案上。 Background 最近開發了新的服務，但服務處於 MVP…","html":"<p>先說這篇文章可能有點短，但我覺得滿實用的，所以還是來寫下紀錄，如果你有遇到一樣問題就…很棒，會簡單介紹一下我使用的背景，再來介紹什麼是 AbortController 最後是怎麼用在 React 專案上。</p>\n<h2 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p>最近開發了新的服務，但服務處於 MVP 階段就沒做太多的優化，發生的細節跟原因就不贅述了，反正就是 API 回應的時間特別的久，大概會需要 5 ~ 10 秒左右。</p>\n<p>當每個 user 在等待 api 時，又不希望卡住 query 動作相關的 UI，所以當 user 在等待時去更新 select 或是 datePicker，就會導致同時 send 多個 api request，但每個都需要 5 ~ 10 秒回應，就有可能導致 race condition。</p>\n<p>當下想到解法就是標題的 <code class=\"language-text\">AbortController</code>。</p>\n<h2 id=\"what-is-abortcontroller\" style=\"position:relative;\"><a href=\"#what-is-abortcontroller\" aria-label=\"what is abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is AbortController</h2>\n<p>先簡短的說 AbortController 是讓我們可以透過 <code class=\"language-text\">const abortItem = new AbortController()</code> 並且透過回傳的 <code class=\"language-text\">abortItem.signal</code> object 以及 <code class=\"language-text\">abortItem.abort</code> function 控制 promise，如果還是不太懂，我們先看 MDN 介紹。</p>\n<ul>\n<li>MDN 中文</li>\n</ul>\n<p>AbortController 介面代表一個控制器物件，讓你可以在需要時中斷一個或多個 DOM 請求。</p>\n<p>你可以使用 AbortController.AbortController() (en-US) 建立一個新的 AbortController 物件。與 DOM 請求溝通時則是使用 AbortSignal (en-US) 物件。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController#browser_compatibility\" title=\"AbortController Browser compatibility\">AbortController Browser compatibility</a></p>\n<h3 id=\"w3org-introduce-abortcontroller\" style=\"position:relative;\"><a href=\"#w3org-introduce-abortcontroller\" aria-label=\"w3org introduce abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>w3.org introduce AbortController</h3>\n<p>接下來是制定規範的 w3.org。</p>\n<ul>\n<li>w3.org</li>\n</ul>\n<p>Though promises do not have a built-in aborting mechanism, many APIs using them require abort semantics. AbortController is meant to support these requirements by providing an abort() method that toggles the state of a corresponding AbortSignal object. The API which wishes to support aborting can accept an AbortSignal object, and use its state to determine how to proceed.</p>\n<p>APIs that rely upon AbortController are encouraged to respond to abort() by rejecting any unsettled promise with a new “AbortError” DOMException.</p>\n<ul>\n<li>For web developer</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">controller = new AbortController()\n  Returns a new controller whose signal is set to a newly created AbortSignal object.\ncontroller . signal\n  Returns the AbortSignal object associated with this object.\ncontroller . abort()\n  Invoking this method will set this object’s AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.</code></pre></div>\n<p>w3.org 內文寫得非常的棒，很清楚的列出 AbortController interface 到底是長怎樣。</p>\n<p><a href=\"https://www.w3.org/2019/01/whatwg-w3c-sample.html#aborting-ongoing-activities\" title=\"w3.org Aborting ongoing activities\">w3.org Aborting ongoing activities</a></p>\n<h2 id=\"how-to-use-in-react\" style=\"position:relative;\"><a href=\"#how-to-use-in-react\" aria-label=\"how to use in react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use in React</h2>\n<p>首先簡單用法會是這樣，append 到 fetch 的第二個 arguments 上，調用 abort 就可以 cancel fetch function，你會在 browser 的 devtool network 的 status 上看到 canceled。</p>\n<ul>\n<li>sample code</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const abortItem = new AbortController();\nfetch('https://jsonplaceholder.typicode.com/todos/1', { signal: abortItem.signal })\n  .then(res => console.log(`res: ${res}`))\n  .catch(err => console.log(`err: ${err}`));\nabortItem.abort(); // err: AbortError: The user aborted a request.</code></pre></div>\n<h3 id=\"useeffect-with-abortcontroller\" style=\"position:relative;\"><a href=\"#useeffect-with-abortcontroller\" aria-label=\"useeffect with abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect with AbortController</h3>\n<p>那假設今天 API Call 是位於 React 的 useEffect 呢。我們可以把 abort 放到 useEffect 的 return 確保每次 useEffect 重新觸發都可以收回上個 fetch api call。</p>\n<p>題外話這是 React 18 的範例，因為新版會在開發模式下重新觸發 useEffect，產生 warning 讓你知道你有 useEffect 的 fetch 沒處理到，但這可以透過關閉嚴格模式取消。</p>\n<ul>\n<li>useEffect with AbortController</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">useEffect(() => {\n  const abortItem = new AbortController();\n  fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, { signal: abortItem.signal })\n    .then(res => console.log(`res: ${res}`))\n    .catch(err => console.log(`err: ${err}`));\n  return () => abortItem.abort(); // err: AbortError: The user aborted a request.\n},[id])</code></pre></div>\n<h3 id=\"event-function-with-abortcontroller\" style=\"position:relative;\"><a href=\"#event-function-with-abortcontroller\" aria-label=\"event function with abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event function with AbortController</h3>\n<p>但最近開發上滿常會避免用過多的 useEffect 去 fetch api，通常只有 init data 用到，情境跟我不一樣，我要處理的是 fetch api call 被 event function 觸發。</p>\n<p>首先想法就是當我 react component rerender 同時，要讓我能找到上一個 AbortController 的 reference，於是我們可以透過 ref 來儲存，因為更新 ref 本身也不會觸發 rerender 機制。</p>\n<p>但一個 action 可能會有多個 function 並且交錯，要怎在一個 ref 記錄多個對應關係，就利用 Map 來儲存，於是寫了這個 hooks。</p>\n<ul>\n<li>abortController hooks</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function useAbortControllerRef() {\n  const abortMap = useRef(new Map());\n\n  const abortLastFetch = (key: string) => {\n    const getAbortController = abortMap.current.get(key);\n    if (getAbortController &amp;&amp; typeof getAbortController.abort === 'function') {\n      getAbortController?.abort();\n    }\n  };\n\n  const fetchWithAbortController = (key: string) => {\n    abortLastFetch(key); // abort previous request, if any\n    const newController = new AbortController();\n    abortMap.current.set(key, newController);\n    return newController;\n  };\n\n  return {\n    fetchWithAbortController,\n  };\n}</code></pre></div>\n<p>這個 hooks 會讓我們透過 <code class=\"language-text\">fetchWithAbortController</code> function 儲存 abortController 到對應的 key 上，每次 getData 執行時，就可以再度用 <code class=\"language-text\">data1</code> 找到並觸發 abort function，終止上一個 fetch api call。</p>\n<ul>\n<li>using in component</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Comp() {\n  const { fetchWithAbortController } = useAbortControllerRef();\n  function getData(){\n    const abortController = fetchWithAbortController('data1');\n    fetch( apiUrl, {signal: abortController.signa} )\n      .then()\n      .catch();\n    ...\n  }\n  return ...\n}</code></pre></div>\n<p>實際上要不要 map 或是用 ref 其實不是很重要，你只要有辦法找到上一個 abortController 並且 call abort 就好。</p>\n<h2 id=\"心得\" style=\"position:relative;\"><a href=\"#%E5%BF%83%E5%BE%97\" aria-label=\"心得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>心得</h2>\n<p>會寫下這篇是因為當下沒找到很方便的寫法，網路上幾乎都是 useEffect 的使用文章，原本以為可以再找 <code class=\"language-text\">abortController</code> 的同時，能更了解有沒有什麼更特殊的用法，看完 w3.org 就算死心了，簡單講就是 trigger promise reject，不過看完 w3.org 介紹後，對我也算獲益良多。</p>\n<p>然後抱怨一下，原本想用 stable Diffusion 產生封面圖，每個都歪七扭怪地怪異，mid journey 又收回免費使用…，最後還是靠自己比較實在。</p>\n<p>一樣最後感謝你的閱讀，如果有錯誤歡迎留言。</p>","fields":{"readingTime":{"text":"7 min read"}},"frontmatter":{"title":"AbortController in React, cancel in function call","date":"May 28, 2023","description":"AbortController 是讓我們可以透過 new AbortController() 並且透過回傳的 signal object 以及 abort function 控制 promise，達到終止 promise 的效果。","categories":"javascript","tags":["react"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#182828","images":{"fallback":{"src":"/static/d023de211c9fc247626759518e563072/53aff/react_abortcontroller.png","srcSet":"/static/d023de211c9fc247626759518e563072/6084e/react_abortcontroller.png 320w,\n/static/d023de211c9fc247626759518e563072/23ca5/react_abortcontroller.png 640w,\n/static/d023de211c9fc247626759518e563072/53aff/react_abortcontroller.png 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/d023de211c9fc247626759518e563072/faf54/react_abortcontroller.webp 320w,\n/static/d023de211c9fc247626759518e563072/2bd37/react_abortcontroller.webp 640w,\n/static/d023de211c9fc247626759518e563072/ea957/react_abortcontroller.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1280,"height":546}}},"image":{"publicURL":"/static/d023de211c9fc247626759518e563072/react_abortcontroller.png"}},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#background\">Background</a></p>\n</li>\n<li>\n<p><a href=\"#what-is-abortcontroller\">What is AbortController</a></p>\n<ul>\n<li><a href=\"#w3org-introduce-abortcontroller\">w3.org introduce AbortController</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#how-to-use-in-react\">How to use in React</a></p>\n<ul>\n<li><a href=\"#useeffect-with-abortcontroller\">useEffect with AbortController</a></li>\n<li><a href=\"#event-function-with-abortcontroller\">event function with AbortController</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%BF%83%E5%BE%97\">心得</a></p>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/2023-11-createsdk/"},"frontmatter":{"title":"How to create JavaScript web sdk"}},"next":{"fields":{"slug":"/2023-02-throttledebounce/"},"frontmatter":{"title":"Throttle and Debounce. 使用場景與嘗試實現它們"}}},"pageContext":{"id":"f12e6f17-9198-5610-9003-1a2eb2531122","previousPostId":"ccfd436b-a7ca-58ad-91a7-f71f02cc1d9c","nextPostId":"0166a81f-3837-518b-a533-8c1cb0a9e93f"}},"staticQueryHashes":["3649515864","3707347541","3761976949"],"slicesMap":{}}