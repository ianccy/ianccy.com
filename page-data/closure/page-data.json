{"componentChunkName":"component---src-templates-post-tsx","path":"/closure/","result":{"data":{"site":{"siteMetadata":{"title":"Ian Chu"}},"markdownRemark":{"id":"bde7fdee-0af9-59a7-b895-c8baae8b6767","excerpt":"JavsScript 的 closure (閉包) 是什麼？ 假設你有在寫 javascript 的話，你可能每天都在用，但你只是沒特別查覺而已。 Clousre 在 MDN 上解釋為 這個解釋是我看過比較簡單直白的。 而我自己對 closure 白話解釋的話，就是利用 return…","html":"<p>JavsScript 的 closure (閉包) 是什麼？ 假設你有在寫 javascript 的話，你可能每天都在用，但你只是沒特別查覺而已。</p>\n<p>Clousre 在 MDN 上解釋為</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">A</span> closure is the combination <span class=\"token keyword\">of</span> a <span class=\"token keyword\">function</span> bundled <span class=\"token function\">together</span> <span class=\"token punctuation\">(</span>enclosed<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> references to its surrounding <span class=\"token function\">state</span> <span class=\"token punctuation\">(</span>the lexical environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>這個解釋是我看過比較簡單直白的。</p>\n<p>而我自己對 closure 白話解釋的話，就是利用 return 回傳值，並且做一個作用域環境封裝。</p>\n<h2 id=\"closure-封裝變數\" style=\"position:relative;\"><a href=\"#closure-%E5%B0%81%E8%A3%9D%E8%AE%8A%E6%95%B8\" aria-label=\"closure 封裝變數 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure 封裝變數</h2>\n<p>以下我建立一個變數 a，是一個 object value 是 { name: ‘ian’}，function getValueA 則會回傳 a，javascript 特性，會在 function 建立時，就以同層尋找變數，找不到就一層一層往外。接下來建立變數 assignA 賦予 getValueA() 回傳值。</p>\n<p>嘗試 log 出來後，會發現第一次會是 {name: “ian”}，但是接下來重新賦予 a 的值，神奇的事發生了，發現 assignA 的值並沒有被改變。但嘗試直接 log 回傳 getValueA() 會發現，a 是有成功被改變了。</p>\n<ul>\n<li>封裝 lexical environment ( 作用域環境 )</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'ian'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getValueA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> assignA <span class=\"token operator\">=</span> <span class=\"token function\">getValueA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>assignA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: \"ian\"}</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>assignA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: \"ian\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>這是因為 closure 幫我們做封裝記憶體，javascript 的記憶體管理機制，幫我們把第一次 return a 時，這個 { name: ‘ian’ }，封裝起來避免被記憶體回收，假設要回收 { name: ‘ian’ } 的方法就是讓 assignA 指向新的參考。</p>\n<ul>\n<li>javascript 記憶體回收</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">「沒有其他任何物件參考它」。如果一個物件不在被任何物件參考，它將被視為可回收記憶體的垃圾。</code></pre></div>\n<p>MDN: <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management\" title=\"記憶體生命週期\">記憶體生命週期</a></p>\n<h2 id=\"javascript-作用域\" style=\"position:relative;\"><a href=\"#javascript-%E4%BD%9C%E7%94%A8%E5%9F%9F\" aria-label=\"javascript 作用域 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript 作用域</h2>\n<p>下面的這個問題，相信大家面試的時候，都被問到爛了，聽到問題是 forLoop 跟 setTimeout 開頭都快可以直接反射背出答案 X Ｄ。</p>\n<ul>\n<li>經典 (<del>面試</del>) 問題</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 3</span></code></pre></div>\n<p>這問題又與 javascript event loop 有關，setTimeout 是 web API，在 javascript 執行緒時，碰到 setTimeout 會被特別放到另一個 stack，等到最後才會來執行，邏輯上就是 i 已經被重新更新到 3 了，但是我才要來開始 log i，那結果當然是 3 出現三次。</p>\n<p>MDN: <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop\" title=\"Event Loop\">Event Loop</a></p>\n<h3 id=\"settimeout-解法\" style=\"position:relative;\"><a href=\"#settimeout-%E8%A7%A3%E6%B3%95\" aria-label=\"settimeout 解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout 解法</h3>\n<p>還是簡單講一下，其中簡單的方法是 var 改用 let，讓每次 let 的作用域被包覆所以記憶起來。另一個就是利用記憶體封裝概念 ，同樣原理也與 let 差不多，利用 function logI(i) 傳入變數，來讓 i 當下的值被封裝。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">logI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">logI</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span></code></pre></div>\n<p>如果你將 logI function 的 argument 拿掉，又會出現三次的 3，因為沒有封裝變數 i。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">logI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">logI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 3</span></code></pre></div>\n<h2 id=\"心得\" style=\"position:relative;\"><a href=\"#%E5%BF%83%E5%BE%97\" aria-label=\"心得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>心得</h2>\n<p>稍微整理一下最近面試常會問的問題，順便整理一下自己對 closure 基本觀念。在找 setTimeout forLoop 除了 let、立即函示外的解法，才找到 function pass argument，也發現自己也不夠了解 function argument 對於 memory 機制這部分。</p>\n<p>雖然說 react 開發上，比較少會因為 closure 踩到雷，但相信<code class=\"language-text\">每多懂一點，未來雷就少踩一點</code>。</p>\n<p>感謝閱讀，有錯誤或意見歡迎留言。</p>","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"JavaScript Closure 你一定有用過的閉包","date":"June 27, 2020","description":"JavsScript 的 closure (閉包) 是什麼？ 假設你有在寫 javascript 的話，你可能每天都在用，但你只是沒特別查覺而已。","categories":"javascript","tags":["javascript"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/d823d2c008518badcd4d3c8af9842dc0/ccaaf/closure.jpg","srcSet":"/static/d823d2c008518badcd4d3c8af9842dc0/5644f/closure.jpg 320w,\n/static/d823d2c008518badcd4d3c8af9842dc0/f3585/closure.jpg 640w,\n/static/d823d2c008518badcd4d3c8af9842dc0/ccaaf/closure.jpg 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/d823d2c008518badcd4d3c8af9842dc0/1f7fd/closure.webp 320w,\n/static/d823d2c008518badcd4d3c8af9842dc0/04ce5/closure.webp 640w,\n/static/d823d2c008518badcd4d3c8af9842dc0/4c212/closure.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1280,"height":624}}},"image":{"publicURL":"/static/d823d2c008518badcd4d3c8af9842dc0/closure.png"}}},"previous":{"fields":{"slug":"/2020-12-thirtyyearsold/"},"frontmatter":{"title":"30 歲的我"}},"next":{"fields":{"slug":"/2020-04-immutable/"},"frontmatter":{"title":"Immutable 對於 React 重要性"}}},"pageContext":{"id":"bde7fdee-0af9-59a7-b895-c8baae8b6767","previousPostId":"3f51052f-e468-5a30-a755-3e9911885298","nextPostId":"46a5ba7f-31f3-5f2e-86f5-29ebcc1b1f28"}},"staticQueryHashes":["3649515864","3707347541","3761976949"],"slicesMap":{}}