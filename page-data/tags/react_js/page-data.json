{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/react_js/","result":{"data":{"site":{"siteMetadata":{"title":"Ian Chu"}},"allMarkdownRemark":{"nodes":[{"excerpt":"先是在前端社群上看到有人在問問題，為什麼他在開發時，，callback 會執行兩次，才看到有人貼上 React 18 beta 的文件，裡面提到為什麼 React 1…","fields":{"slug":"/2022-08-useeffectintro/","readingTime":{"text":"10 min read"}},"frontmatter":{"date":"August 06, 2022","title":"Rediscover useEffect","description":"開發時不要預想用 useEffect 處理，但如果 code 難以閱讀、管理，或是要避免每次 update 都執行的 function，那才來考慮使用 useEffect。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/static/c94152458d98aee0f7484f9874cffe9a/6b019/sideeffect.jpg","srcSet":"/static/c94152458d98aee0f7484f9874cffe9a/c8ee8/sideeffect.jpg 100w,\n/static/c94152458d98aee0f7484f9874cffe9a/ca582/sideeffect.jpg 200w,\n/static/c94152458d98aee0f7484f9874cffe9a/6b019/sideeffect.jpg 400w,\n/static/c94152458d98aee0f7484f9874cffe9a/e737e/sideeffect.jpg 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/c94152458d98aee0f7484f9874cffe9a/fd9c7/sideeffect.webp 100w,\n/static/c94152458d98aee0f7484f9874cffe9a/f201f/sideeffect.webp 200w,\n/static/c94152458d98aee0f7484f9874cffe9a/e8709/sideeffect.webp 400w,\n/static/c94152458d98aee0f7484f9874cffe9a/e7773/sideeffect.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":200}}},"categories":"javascript"}},{"excerpt":"Immutable 是我想寫很久的主題，前一份工作時，就大大的踩到關於 immutable 的雷，那時候依靠 google…","fields":{"slug":"/2020-04-immutable/","readingTime":{"text":"4 min read"}},"frontmatter":{"date":"April 29, 2020","title":"Immutable 對於 React 重要性","description":"React 有提到 state 的更新，都必須要是 immutable，當你有使用到 useState 或是 pureComponent、shouldComponentUpdate，你就會發現問題。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8f8","images":{"fallback":{"src":"/static/4f1b194d3f394f7e66bb7c726da840eb/967a7/immutable.jpg","srcSet":"/static/4f1b194d3f394f7e66bb7c726da840eb/96d0d/immutable.jpg 100w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/174c6/immutable.jpg 200w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/967a7/immutable.jpg 400w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/e505b/immutable.jpg 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/4f1b194d3f394f7e66bb7c726da840eb/c8e8b/immutable.webp 100w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/99399/immutable.webp 200w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/825de/immutable.webp 400w,\n/static/4f1b194d3f394f7e66bb7c726da840eb/3a40a/immutable.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":164}}},"categories":"javascript"}},{"excerpt":"最近接觸某個重要專案，這專案很特別，每個狀態都會對應不同 config 有不同回應，網頁操作、業務邏輯十分之複雜，大概就像是 tree structure 一樣。我負責翻新頁面的 login flow…","fields":{"slug":"/2020-02-reactpuppeteer/","readingTime":{"text":"10 min read"}},"frontmatter":{"date":"February 28, 2020","title":"Puppeteer End-to-End Test React","description":"會以 Puppeteer 在 react 專案上跑 End to End Test。puppeteer 是由 Chrome DevTools team 團隊開發的，它是一個 node library 工具，提供 API 讓我們控制 chrome 或 Chromium，模擬執行各種功能。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#585868","images":{"fallback":{"src":"/static/b6532504d32a73de3210b9baf63cf00f/c8dce/puppeteerjest.png","srcSet":"/static/b6532504d32a73de3210b9baf63cf00f/5f9fc/puppeteerjest.png 100w,\n/static/b6532504d32a73de3210b9baf63cf00f/573c0/puppeteerjest.png 200w,\n/static/b6532504d32a73de3210b9baf63cf00f/c8dce/puppeteerjest.png 400w,\n/static/b6532504d32a73de3210b9baf63cf00f/7bc8c/puppeteerjest.png 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/b6532504d32a73de3210b9baf63cf00f/fd9c7/puppeteerjest.webp 100w,\n/static/b6532504d32a73de3210b9baf63cf00f/f201f/puppeteerjest.webp 200w,\n/static/b6532504d32a73de3210b9baf63cf00f/e8709/puppeteerjest.webp 400w,\n/static/b6532504d32a73de3210b9baf63cf00f/b1e09/puppeteerjest.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":200}}},"categories":"javascript"}},{"excerpt":"redux 核心更新 flow ，當你用 redux 運行多個 dispatch 時，每一個 dispatch 都會獨立更新下去的，這代表著你會 update component 多次，如果你的更新資料又彼此關聯，就可能會發生錯誤。 目前執行的專案，資料都是 linked…","fields":{"slug":"/2019-11-reduxdispatch/","readingTime":{"text":"5 min read"}},"frontmatter":{"date":"November 30, 2019","title":"Redux multiple dispatch，batch redux-thunk","description":"redux 核心流程 dispatch action => reducer => store，當你用 redux 運行多個 dispatch 時，每一個 dispatch 都會獨立更新下去的，如果你的更新資料又彼此關聯，就可能會發生錯誤。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#688898","images":{"fallback":{"src":"/static/98774fcb9185ece7c2ac182e96d70db5/d5263/redux-dispatch.png","srcSet":"/static/98774fcb9185ece7c2ac182e96d70db5/2b3cb/redux-dispatch.png 100w,\n/static/98774fcb9185ece7c2ac182e96d70db5/a01ba/redux-dispatch.png 200w,\n/static/98774fcb9185ece7c2ac182e96d70db5/d5263/redux-dispatch.png 400w,\n/static/98774fcb9185ece7c2ac182e96d70db5/1c373/redux-dispatch.png 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/98774fcb9185ece7c2ac182e96d70db5/09ad4/redux-dispatch.webp 100w,\n/static/98774fcb9185ece7c2ac182e96d70db5/ddd64/redux-dispatch.webp 200w,\n/static/98774fcb9185ece7c2ac182e96d70db5/ca080/redux-dispatch.webp 400w,\n/static/98774fcb9185ece7c2ac182e96d70db5/5ceac/redux-dispatch.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":193.00000000000003}}},"categories":"javascript"}},{"excerpt":"Unit Test(單元測試)，針對程式的最小單位，進行測試，最小單位可能是一個 function，或一個 component、class…","fields":{"slug":"/2019-09-jestunit/","readingTime":{"text":"11 min read"}},"frontmatter":{"date":"September 29, 2019","title":"React Unit Test with Jest 單元測試","description":"單元測試在我剛寫程式時，認為測試 case 是自己預期的，還主觀的認為沒什麼用。但我在實際寫幾個測試後，能更專注在預期判斷 input output，也有助於你思考 function 架構更清楚。接下來就來針對 react hooks 做 component testing。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8e8e8","images":{"fallback":{"src":"/static/7956ce03fba51cee80d476032b4bd3a6/bfb6f/reactunittest.png","srcSet":"/static/7956ce03fba51cee80d476032b4bd3a6/f42da/reactunittest.png 100w,\n/static/7956ce03fba51cee80d476032b4bd3a6/883db/reactunittest.png 200w,\n/static/7956ce03fba51cee80d476032b4bd3a6/bfb6f/reactunittest.png 400w,\n/static/7956ce03fba51cee80d476032b4bd3a6/6c4e8/reactunittest.png 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/7956ce03fba51cee80d476032b4bd3a6/0f67b/reactunittest.webp 100w,\n/static/7956ce03fba51cee80d476032b4bd3a6/591bc/reactunittest.webp 200w,\n/static/7956ce03fba51cee80d476032b4bd3a6/e33c7/reactunittest.webp 400w,\n/static/7956ce03fba51cee80d476032b4bd3a6/39074/reactunittest.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":182.99999999999997}}},"categories":"javascript"}},{"excerpt":"React 是單向資料流，利用 React.createElement 建構出整個 element tree 結構，使用者利用 state 及 props 處理元件資料，並搭配觸發 react 更新元件。因為 props 是需要傳遞的，所以時常會遇到 props…","fields":{"slug":"/2019-07-reactcontextapi/","readingTime":{"text":"7 min read"}},"frontmatter":{"date":"July 28, 2019","title":"React Context API 跨元件傳遞資料","description":"React為了解決props 需要傳很多層問題，就在v16.3 更新 context API 的功能，context API 主要功能就是跨元件傳遞資料。利用createContext 建立context，並搭配Provider、Consumer、contexttype、usecontext 跨元件取值。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/1cf7f/react.png 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/a9c82/react.png 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/7f3f0/react.webp 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b4f62/react.webp 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aa0f9/react.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}},{"excerpt":"React 發布了幾個月的 Hooks，最近也開始嘗試接觸，後面會稍微提一下 PureComponent，不會介紹 hooks 各種特殊用法，就只針對 hooks performance 優化做介紹，還有搭配 redux 的處理。 因為前陣子有處理過 React…","fields":{"slug":"/2019-06-reacthooks/","readingTime":{"text":"10 min read"}},"frontmatter":{"date":"June 01, 2019","title":"React Hooks Performance 效能處理","description":"React發布了幾個月的Hooks，最近也開始嘗試接觸，後面會稍微提一下PureComponent，不會介紹hooks各種特殊用法，就只針對hooks performance優化做介紹。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/ef923c6861937178eebcde2d6d04f7df/7019c/reacthooks.png","srcSet":"/static/ef923c6861937178eebcde2d6d04f7df/1cf7f/reacthooks.png 100w,\n/static/ef923c6861937178eebcde2d6d04f7df/a9c82/reacthooks.png 200w,\n/static/ef923c6861937178eebcde2d6d04f7df/7019c/reacthooks.png 400w,\n/static/ef923c6861937178eebcde2d6d04f7df/fc09b/reacthooks.png 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/ef923c6861937178eebcde2d6d04f7df/7f3f0/reacthooks.webp 100w,\n/static/ef923c6861937178eebcde2d6d04f7df/b4f62/reacthooks.webp 200w,\n/static/ef923c6861937178eebcde2d6d04f7df/aa0f9/reacthooks.webp 400w,\n/static/ef923c6861937178eebcde2d6d04f7df/46f9e/reacthooks.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}},{"excerpt":"先來稍微介紹一下為什麼要做 server side render，另外這邊不會使用 next.js，雖然公司目前專案有用到，但我滿推薦用 next.js 的，很好導入並且解決很多需要處理的問題。(雖然有一些 bug、還會頻繁更新，兩年內 version 3 ->…","fields":{"slug":"/2019-01-reactssr/","readingTime":{"text":"8 min read"}},"frontmatter":{"date":"January 30, 2019","title":"React Server-side rendering SEO處理","description":"不使用next.js，來試著依靠原生方法，架構出React server-side render，會使用到react官方的cli create-react-app，以及node.js作為server。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/1cf7f/react.png 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/a9c82/react.png 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/7f3f0/react.webp 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b4f62/react.webp 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aa0f9/react.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}},{"excerpt":"前陣子公司專案從 next 3 更新到 7、react 也從 15 更新到 16，希望能加快開發或佈署的速度，順便分享一下踩到了哪些的地雷。 首先呢，update react、react-dom、next，接下來開始測試一下 local build…","fields":{"slug":"/2018-12-nextupdate/","readingTime":{"text":"5 min read"}},"frontmatter":{"date":"December 09, 2018","title":"Update Next.js 7、react 16 error and bug","description":"前陣子公司專案從next3更新到7、react也從15更新到16，希望能加快開發或佈署的速度，順便分享一下踩到了哪些的地雷。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/7b99da12437122f2dbf8e8ce89c73dc8/08292/next%26react.png","srcSet":"/static/7b99da12437122f2dbf8e8ce89c73dc8/73cc8/next%26react.png 100w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/bcdba/next%26react.png 200w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/08292/next%26react.png 400w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/ac78e/next%26react.png 800w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/7b99da12437122f2dbf8e8ce89c73dc8/aa370/next%26react.webp 100w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/8a265/next%26react.webp 200w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/268cf/next%26react.webp 400w,\n/static/7b99da12437122f2dbf8e8ce89c73dc8/2d836/next%26react.webp 800w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":196}}},"categories":"javascript"}},{"excerpt":"這幾天專案要處理非常麻煩的畫面，子層被父層 overflow: hidden 加 postion relative 切到部分展開元件，突然想到之前同事提到新功能 Portals，Portals 能夠將元件向任意 dom…","fields":{"slug":"/2018-11-reactportal/","readingTime":{"text":"3 min read"}},"frontmatter":{"date":"November 19, 2018","title":"React Portals render component anywhere example","description":"React Portals 是非常酷炫的功能，能夠將元件向任意dom節點依附渲染，這邊會介紹兩個範例，頁面上渲染元件，還有渲染元件到window open上。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/1cf7f/react.png 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/a9c82/react.png 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/7f3f0/react.webp 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b4f62/react.webp 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aa0f9/react.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}},{"excerpt":"如果在開發上是用 React，最常用到就是一定是處理 state、props，而其中最重要的莫過於是生命週期 lifeCycle，可以在每個元件渲染的過程，加入需要的處理，例如載入完元件後非同步抓取資料，更新 props 觸發處理事件等等。接下來就來介紹 life Cycle…","fields":{"slug":"/2018-07-reactlife/","readingTime":{"text":"11 min read"}},"frontmatter":{"date":"July 27, 2018","title":"React Life Cycle 生命週期更新版，父子元件執行順序","description":"開發上用到React，而其中最重要的莫過於是生命週期lifeCycle，可以在每個元件渲染的過程，加入需要的處理，例如載入完元件後非同步抓取資料，更新props觸發處理事件等等。接下來介紹一下新版本的life Cycle。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/1cf7f/react.png 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/a9c82/react.png 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/7f3f0/react.webp 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b4f62/react.webp 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aa0f9/react.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}},{"excerpt":"換了工作環境，接觸了全新的專案，一打開 react 專案，恩…滿滿的 stateless component，稍微整理一下相關資訊。這邊要來介紹使用 stateless component 的時候，常會搭配使用的 Higher Order Components…","fields":{"slug":"/2018-05-reacthoc/","readingTime":{"text":"4 min read"}},"frontmatter":{"date":"May 08, 2018","title":"React Higher Order Components 初探觀念","description":"介紹關於使用stateless component時，常會搭配使用的Higher Order Components，之前有看到「高階組件」這區塊，被他名字誤會了，實際上一點也不高階，他就只是一個function 函式，接受參數元件然後回傳全新元件，簡易的範例如下。","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/1cf7f/react.png 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/a9c82/react.png 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/7019c/react.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/7f3f0/react.webp 100w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b4f62/react.webp 200w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aa0f9/react.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":205}}},"categories":"javascript"}}]}},"pageContext":{"tag":"react.js"}},"staticQueryHashes":["3649515864","3761976949","441988385"]}