{"componentChunkName":"component---src-templates-post-tsx","path":"/reactcontextapi/","result":{"data":{"site":{"siteMetadata":{"title":"Ian Chu"}},"markdownRemark":{"id":"627fdf55-94cf-57d2-8ea0-71a491c2a832","excerpt":"React 是單向資料流，利用 React.createElement 建構出整個 element tree 結構，使用者利用 state 及 props 處理元件資料，並搭配觸發 react 更新元件。因為 props 是需要傳遞的，所以時常會遇到 props 需要傳很多層。React…","html":"<p>React 是單向資料流，利用 React.createElement 建構出整個 element tree 結構，使用者利用 state 及 props 處理元件資料，並搭配觸發 react 更新元件。因為 props 是需要傳遞的，所以時常會遇到 props 需要傳很多層。React 為了解決這問題，建立了 context API 的功能，要功能就是跨元件傳遞資料，像是知名的 state 管理工具 react-redux 就是依賴 context 實現的。</p>\n<p>最近就遇到所有 API Error handle 都需要用到新欄位的值，這個值就幾乎傳到到所有元件，中間還不小心遺漏傳遞一個元件，發生些問題…。現在回過頭想想用 context 處理問題會少很多。</p>\n<ul>\n<li>Pass props Hell</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Header islogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>islogin<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// inside Header Element</span>\n  <span class=\"token operator\">&lt;</span>Navbar islogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>islogin<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// inside Navbar Element</span>\n    <span class=\"token operator\">&lt;</span>Account islogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>islogin<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token comment\">// inside Account Element</span>\n      <span class=\"token operator\">&lt;</span>User islogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>islogin<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>islogin <span class=\"token operator\">?</span>\n          <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Logout<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Logout<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n        <span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// Pass all props</span>\n<span class=\"token comment\">// it will make child Components rerender by all props update</span>\n<span class=\"token operator\">&lt;</span>Header <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"createcontext-建立資料\" style=\"position:relative;\"><a href=\"#createcontext-%E5%BB%BA%E7%AB%8B%E8%B3%87%E6%96%99\" aria-label=\"createcontext 建立資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createContext 建立資料</h2>\n<p>首先必須先在需要使用的元件內，先執行<code class=\"language-text\">React.createContext</code>建立一個 context，其中參數 defaultValue 只會在沒有 Provider 傳遞 value 才會使用到。</p>\n<ul>\n<li>React.createContext return object</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// React.createContext(defaultValue);</span>\n<span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">Consumer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>$$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">_context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">_calculateChangedBits</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">Provider</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>$$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">_context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>…<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">_calculateChangedBits</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token literal-property property\">_currentRenderer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">_currentRenderer2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token literal-property property\">_currentValue</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">_currentValue2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">_threadCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> Object</code></pre></div>\n<h2 id=\"provider-提供-value\" style=\"position:relative;\"><a href=\"#provider-%E6%8F%90%E4%BE%9B-value\" aria-label=\"provider 提供 value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider 提供 value</h2>\n<p>調用 createContext 後，回傳的物件會帶有 Provider、Consumer 元件，Provider 可以提供 value，給相對應最接近的 Consumer 使用 value，最特別的是 Provider 更新 value 後，會觸發相對應的 Consumer 更新元件，並且無視 shouldComponentUpdate 限制 (這在舊版 Context 無法達到)。</p>\n<p>記得要 export React.createContext 回傳值，讓其他元件可以直接 import 使用 Consumer。還有提醒要注意 Provider 的 update 狀態，如果 Provider 的元件會頻繁更新，但 Provider 的 value 會每次都是新物件，會促使有 Cosumer 的元件每次都 update。</p>\n<ul>\n<li>當元件 rerender 會同時更新 Consumer 調用的元件</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// isLogin will forever new one</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> isLogin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>傳遞的值保持同一參考 MyContext Provider</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLoginStatus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoginStatus <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isLoginStatus<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h2 id=\"consumer-提取-value\" style=\"position:relative;\"><a href=\"#consumer-%E6%8F%90%E5%8F%96-value\" aria-label=\"consumer 提取 value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consumer 提取 value</h2>\n<p>Consumer 元件可以獲取 context 資料，假設沒有最接近的 Provider 提供 value，Cosumer 會取到 createContext 的 defaultvalue。若有 Provider 提供值，則是會保持訂閱更新，也就是達到跨元件同步資料，並 update component。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MyContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../Container\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"account\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isLogin <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> isLogin <span class=\"token operator\">?</span> <span class=\"token string\">\"Logout\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/s/relaxed-banzai-su39f\" title=\"Consumer codesandbox\">Consumer codesandbox</a></p>\n<iframe src=\"https://codesandbox.io/embed/relaxed-banzai-su39f?fontsize=12,result\" width=\"100%\" height=\"400\"></iframe>\n<h2 id=\"context-更新-rerender-取用元件\" style=\"position:relative;\"><a href=\"#context-%E6%9B%B4%E6%96%B0-rerender-%E5%8F%96%E7%94%A8%E5%85%83%E4%BB%B6\" aria-label=\"context 更新 rerender 取用元件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>context 更新 rerender 取用元件</h2>\n<p>context 的 Provider 更新 value 時，會一起更新 context Consumer 的取用元件，並且無視於 shouldComponentUpdate。</p>\n<p><a href=\"https://codesandbox.io/s/happy-moon-ypeqm\" title=\"Consumer shouldComponentUpdate codesandbox\">Consumer shouldComponentUpdate codesandbox</a></p>\n<iframe src=\"https://codesandbox.io/embed/happy-moon-ypeqm?fontsize=12,result\" width=\"100%\" height=\"400\"></iframe>\n<h2 id=\"contexttype-取值\" style=\"position:relative;\"><a href=\"#contexttype-%E5%8F%96%E5%80%BC\" aria-label=\"contexttype 取值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contextType 取值</h2>\n<p>contextType 是直接在 react 的 component 的 instance 再加上 context，所以只能用在 class Component，一個元件只能使用一個 context。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MyContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"../context/MyContext\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLogin<span class=\"token punctuation\">,</span> setLogin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"account\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">\"Logout\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>toggleLogin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我在這邊有遇到一個問題，在 Container component export context，並在 Account 引用 Container export 的 context 時，會發生我取不到值得問題，這是因為循環依賴的關係，在我們 Account 引用 Container 內的 MyContext 時，ES6 只會是 referrence MyContext undefined 狀態，實際在 Container 還尚未建立 createContext，這個 Account 又會再初始化階段就執行 MyContext，導致拿到 empty object。</p>\n<p>解法就是獨立建 MyContext ，解除與 Container 關係，就可以避免掉循環依賴的問題。至於 Consumer 會沒有問題，因為 Consumer 是在 render 時才會調用參考，所以會拿到正確的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Container File</span>\n<span class=\"token keyword\">import</span> Account <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Account\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n      <span class=\"token operator\">&lt;</span>MyContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> isLogin<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">setLogin</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setLogin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Account <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MyContextProvider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Account File</span>\n\n<span class=\"token keyword\">import</span> MyContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"../Container\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// MyContext undefined</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// empty object</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Dan 神表示: <a href=\"https://github.com/facebook/react/issues/13969#issuecomment-474373021\" title=\"16.6 Context API not working in class component \">React contextType undefined GitHub issue</a></p>\n<p><a href=\"https://railsware.com/blog/how-to-analyze-circular-dependencies-in-es6/\" title=\"how-to-analyze es6 circular-dependencies\">how-to-analyze es6 circular-dependencies</a></p>\n<ul>\n<li>獨立建立引用 context\n<a href=\"https://codesandbox.io/s/relaxed-fermat-c097p\" title=\"file context codesandbox\">file context codesandbox</a>\n{% iframe <a href=\"https://codesandbox.io/embed/relaxed-fermat-c097p?fontsize=12,result\">https://codesandbox.io/embed/relaxed-fermat-c097p?fontsize=12,result</a> 100% 400px %}\n<iframe src=\"https://codesandbox.io/embed/relaxed-fermat-c097p?fontsize=12,result\" width=\"100%\" height=\"400\"></iframe>\n</li>\n</ul>\n<h2 id=\"hooks-usecontext\" style=\"position:relative;\"><a href=\"#hooks-usecontext\" aria-label=\"hooks usecontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks useContext</h2>\n<p>React Hooks 有可以直接調用 Context 的方法，useContext 與 Consumer 特性相似，當沒有 Provider 提供 value，就會以 defaultValue 為值，提醒有用到 useContext 的元件當 value 更新時皆會 rerender，rerender 效能不好的話，建議搭配 Memo 來做 memorize。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Preventing rerenders with React.memo and useContext hook.\n<a href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\" title=\"Preventing rerenders with React.memo and useContext hook.\">Preventing rerenders with React.memo and useContext hook.</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MyContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"../context/MyContext\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLogin<span class=\"token punctuation\">,</span> setLogin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"account\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">\"Logout\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>toggleLogin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isLogin<span class=\"token punctuation\">,</span> setLogin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/s/gifted-wood-8ot48\" title=\"useContext with useMemo codesandbox\">useContext with useMemo codesandbox</a></p>\n<iframe src=\"https://codesandbox.io/embed/gifted-wood-8ot48?fontsize=12,result\" width=\"100%\" height=\"400\"></iframe>\n<h2 id=\"心得\" style=\"position:relative;\"><a href=\"#%E5%BF%83%E5%BE%97\" aria-label=\"心得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>心得</h2>\n<p>會特別研究寫關於 context API 內容，是因為目前專案幾乎都沒用到，多半還是以 redux 居多，redux 更新版 hooks 也有 useSelector，也是非常好用，雖然常聽到 useReucer、useContext 幾乎可以取代 redux。</p>\n<p>但 redux 有極好用的 debug 工具，devtool 觀看變化、history、dispatch，這些都是無法取代的功能。與夥伴討論過後，認為某些無狀態不需要更新值，我們才會考慮用 context API，因為不需要 update，也沒有隨之的監控更新需求。</p>\n<!--- ![React Context](../images/react.png \"React Context\") --->\n","fields":{"readingTime":{"text":"7 min read"}},"frontmatter":{"title":"React Context API 跨元件傳遞資料","date":"July 28, 2019","description":"React為了解決props 需要傳很多層問題，就在v16.3 更新 context API 的功能，context API 主要功能就是跨元件傳遞資料。利用createContext 建立context，並搭配Provider、Consumer、contexttype、usecontext 跨元件取值。","categories":"javascript","tags":["react.js"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/49f3722d7cadbd2be8eefba27f6a5890/b1838/react.png","srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/caad8/react.png 183w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/aef11/react.png 366w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/b1838/react.png 732w","sizes":"(min-width: 732px) 732px, 100vw"},"sources":[{"srcSet":"/static/49f3722d7cadbd2be8eefba27f6a5890/305d6/react.webp 183w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/12464/react.webp 366w,\n/static/49f3722d7cadbd2be8eefba27f6a5890/164a3/react.webp 732w","type":"image/webp","sizes":"(min-width: 732px) 732px, 100vw"}]},"width":1280,"height":657.4863387978141}}},"image":{"publicURL":"/static/49f3722d7cadbd2be8eefba27f6a5890/react.png"}}},"previous":{"fields":{"slug":"/2019-06-gauserid/"},"frontmatter":{"title":"Google Analytics 自訂UserId 追蹤數據"}},"next":{"fields":{"slug":"/2019-08-gacrossdomain/"},"frontmatter":{"title":"GA跨網域追蹤 google analytics cross-domain tracking"}}},"pageContext":{"id":"627fdf55-94cf-57d2-8ea0-71a491c2a832","previousPostId":"4a0f4fd6-c622-5c40-87a8-78f33334aae6","nextPostId":"b9e9b42c-f0a6-5f5e-bd77-d68dc62fea15"}},"staticQueryHashes":["3649515864","3761976949","441988385"]}